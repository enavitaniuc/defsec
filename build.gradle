/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'mysql:mysql-connector-java:8.0.26'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    
    // OpenAPI/Swagger documentation - upgraded version
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    
    // Structured JSON logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
}

application {
    // Define the main class for the application.
    mainClass = 'defsec.DefsecApplication'
}

// Configure source sets
sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Configure test task
test {
    useJUnitPlatform()
    
    // Show test results in console
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams false
    }
    
    // Show summary after tests complete
    afterSuite { desc, result ->
        if (!desc.parent) { // Only print for the root suite
            def output = "Results: ${result.resultType} " +
                        "(${result.testCount} tests, " +
                        "${result.successfulTestCount} passed, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}

// Custom task to run full build pipeline
task all {
    group = 'build'
    description = 'Runs clean, build, test, and bootJar in sequence'
    
    doLast {
        println "All tasks completed: clean, build, test, bootJar"
    }
}

// Configure task dependencies to avoid circular dependency
all.dependsOn clean
all.dependsOn build
all.dependsOn test
all.dependsOn bootJar

// Ensure proper execution order
build.mustRunAfter clean
test.mustRunAfter clean
bootJar.mustRunAfter clean
bootJar.mustRunAfter test
